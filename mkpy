#!/bin/bash -eu

# ****************************************************************************
# DESCRIPTION
#   Staffold a simple python3 program incl. argparse and logging
#
#
# Todo: create a sample logging ini
#
# bugs and hints: lrsklemstein@gmail.com
# ****************************************************************************

readonly PROG=${0##*/}


print_usage_and_exit() {
    echo "Usage: $PROG [-e] [-l LOG_INI] PYPROG" >&2
    exit 2
}

msg() {
    echo "$*" >&2
}

abort() {
    msg "$*"
    exit 1
}

log_ini=
edit=n

while getopts el: opt
do
    echo "opt: ->$opt<-"

    case $opt in
        e)
            edit=y 
            ;;
        l)
           log_ini=$OPTARG
           ;;
        *)
            print "Fump..."
            print_usage_and_exit
            ;;
    esac
done

shift $((OPTIND-1))

[ $# -eq 1 ] || print_usage_and_exit

pyprog="$1"

if [ -f "$pyprog" ]
then
    abort "\"$pyprog\" already exist"
fi

email=$(git config --global user.email 2>/dev/null) || true
[ -n "$email" ] || email="<unknown>"

/bin/cat >$pyprog <<EOF
#!/usr/bin/env python3

# ****************************************************************************
# DESCRIPTION
#   Does this and that. And much mure.

# bugs and hints: ${email}
# ****************************************************************************

import argparse
import logging
import sys


__log_level_default = logging.INFO


def main():
    setup = get_prog_setup_or_exit_with_usage()  # might exit with rc=2
    init_logging(setup)

    logger = logging.getLogger(__name__)

    try:
        sys.exit(run(setup))
    except Exception:
        logger.critical('Abort, rc=3', exc_info=True)
        sys.exit(3)


def get_prog_setup_or_exit_with_usage() -> dict[str, any]:
    parser = argparse.ArgumentParser(
        description=(
            'Some words about what your program actually does'
        )
    )

    log_group = parser.add_mutually_exclusive_group()

    parser.add_argument(
        'FIX_ARG_EXAMPLE', help='FIX_ARG is for, well: please say it',
    )

    parser.add_argument(
        '--optional_arg', help='an example for an optional arg',
    )

    log_group.add_argument(
        '--debug', action='store_true',
        help='enable debug log level',
    )

    log_group.add_argument(
        '--log_cfg', dest='log_cfg',
        help='optional logging cfg in ini format',
    )

    args = vars(parser.parse_args())
    args = {k: '' if v is None else v for k, v in args.items()}

    return args


def init_logging(setup: dict[str, any]) -> None:
    """Creates either a logger by cfg file or a default instance
    with given log level by arg --log_level (otherwise irgnored)

    """
    if setup['log_cfg'] == '':
        if setup['debug']:
            level = logging.DEBUG
            format = '%(levelname)s - %(message)s'
        else:
            level = __log_level_default
            format = '%(message)s'

        logging.basicConfig(level=level, format=format)
    else:
        logging.config.fileConfig(setup['log_cfg'])


def run(setup: dict[str, any]) -> int:
    logger = logging.getLogger(__name__)

    #
    # this is the entry point for what your program actually does...
    # 

    logger.info(f'Done something...')
    
    return 0


if __name__ == '__main__':
    main()
EOF

chmod +x $pyprog

msg "Created $pyprog"

if [ $edit = y ]
then
    editor=${EDITOR:-vi}

    if egrep -q "$editor" <<< '^(n?vi|n?vim)$'
    then
        p="logger\.info.*f'Done something"
        typeset -i run_pos=$(grep -n "$p" $pyprog  | cut -d: -f1)
        run_pos=run_pos-1
        $editor +$run_pos $pyprog
    else
        $editor $pyprog
    fi
fi

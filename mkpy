#!/bin/bash -eu

# ****************************************************************************
# DESCRIPTION
#   Staffold a simple python3 program incl. argparse and logging
#
# bugs and hints: lrsklemstein@gmail.com
# ****************************************************************************

# IDEAS:
# - project option
# - Dockerfile?

# ----------------------------------------------------------------------------
# constants
# ----------------------------------------------------------------------------

readonly PROG=${0##*/}

readonly MY_VERSION='1.9.1'

SHORT_USAGE="$PROG [-h] [options] PYPROG"
readonly SHORT_USAGE

readonly ENTRY_COMMENT="
    #
    # this is the entry point for what your program actually does...
    #
"

# ----------------------------------------------------------------------------
# defaults
# ----------------------------------------------------------------------------
#
shebang='#!/usr/bin/env python3'

log_ini=n
async=n
force_mode=n
create_uv_caller=n

description="Here you should add a short description at least!

Optionally followed by some lines going more
into the details"

setup_getter='setup = get_prog_setup_or_exit_with_usage()'

rc_ok=0
rc_usage=2
rc_exception=3

# ----------------------------------------------------------------------------
# functions
# ----------------------------------------------------------------------------

print_short_usage_and_exit() {
    echo "Usage: $SHORT_USAGE" >&2
    exit 2
}

print_version_and_exit() {
    echo "This is $PROG version $MY_VERSION" >&2
    exit 2
}

print_long_usage_and_exit() {
    /bin/cat >&2 <<EOF
mkpy = make python program

A simple tool to create a new python3 program in a unique way.
Functions are used with type hints. The two python functions you should
start with are:

- get_prog_setup_or_exit_with_usage():
    Here you define your program usage and the description using the
    argparse module.

- run():
    This is the actual entry point for your application specific code
    (not main, which is just used as an exception safe start point)

base usage:

$SHORT_USAGE

options:
    -h: show this help
    -v: show $PROG version
    -f: force mode (overwrite files and directories if required)
    -a: create asynchronious run function
    -u: create uv caller (e.g. mytool for mytool.py)
    -d: set program description (for usage)
    -L: create logging ini file

bugs and hints: lrsklemstein@gmail.com
EOF

    exit 2
}

msg() {
    echo "[$PROG]Â $*" >&2
}

abort() {
    msg "$*"
    exit 1
}

ap_fix_args_example() {
    /bin/cat <<EOF
    parser.add_argument(
        'FIX_ARG_EXAMPLE', help='FIX_ARG is for, well: please say it',
    )
EOF
}

get_run_func() {
    /bin/cat <<EOF
def run(setup: t_setup) -> int:
    logger = logging.getLogger(__name__)
${ENTRY_COMMENT}
    logger.info('Did something...')

    return ${rc_ok}
EOF
}

# ----------------------------------------------------------------------------
# main
# ----------------------------------------------------------------------------

while getopts afvLhu opt; do
    case $opt in
        h)
            print_long_usage_and_exit
            ;;
        v)
            print_version_and_exit
            ;;
        a)
            async=y
            ;;
        f)
            force_mode=y
            ;;
        u)
            create_uv_caller=y
            ;;
        d)
            description=$OPTARG
            ;;
        m)
            git_message=$OPTARG
            ;;
        L)
            log_ini=y
            ;;
        *)
            print_short_usage_and_exit
            ;;
    esac
done

fix_args=$(ap_fix_args_example)

shift $((OPTIND - 1))

[ $# -eq 1 ] || print_short_usage_and_exit

pyprog="$1"

if [ "$pyprog" = "." ]; then
    if [[ $PWD = $HOME || $PWD != *$HOME/* ]]; then
        echo "Can not autor-create python program here." >&2
        exit 1
    fi
    pyprog=${PWD##*/}
fi

# extend pyprog with .py if not already done
pyprog_basename=${pyprog%*.py}
if [ "$pyprog_basename" = "$pyprog" ]; then
    pyprog=${pyprog_basename}.py
    msg "Extend program name with .py"
fi

msg "pyprog_basename: $pyprog_basename"
if [ -f "$pyprog_basename" ]; then
    abort "\"$pyprog_basename\" already exist"
fi

if [ -f "$pyprog" -a "$force_mode" = n ]; then
    abort "\"$pyprog\" already exist"
fi

email=$(git config --global user.email 2>/dev/null) || true
[ -n "$email" ] || email="<unknown>"

run_func=$(get_run_func)

/bin/cat >$pyprog <<EOF
${shebang}

"""
${description}
"""

# bugs and hints: ${email}

import argparse
import logging
import logging.config
import os
import os.path
import sys

from typing import Any, Dict  # , List, Tuple, Callable

t_setup = Dict[str, Any]

__LOG_LEVEL_DEFAULT = logging.INFO


def main() -> None:
    ${setup_getter}

    init_logging(setup)
    logger = logging.getLogger(__name__)

    try:
        sys.exit(run(setup))
    except Exception:
        logger.critical("Abort, rc=${rc_exception}", exc_info=True)
        sys.exit(${rc_exception})


def get_prog_setup_or_exit_with_usage() -> t_setup:
    parser = argparse.ArgumentParser(
                description=get_prog_doc(), prog=get_prog_name(),
                formatter_class=argparse.RawTextHelpFormatter,
            )

    log_group = parser.add_mutually_exclusive_group()

${fix_args}

#   parser.add_argument(
#        '--optional_arg', help='an example for an optional arg',
#   )

    log_group.add_argument(
        '--debug', '-D', action='store_true', dest='debug',
        help='enable debug log level',
    )

    log_group.add_argument(
        '--log_cfg', '-L', dest='log_cfg',
        help='optional logging cfg in ini format',
    )

    args = vars(parser.parse_args())
    args = {k: '' if v is None else v for k, v in args.items()}

    return args


def get_prog_name() -> str:
    """Returns the name of the program, without path and extension *OR
    take the value from the environment variable __PY_CALLER__ if set.
    """

    py_caller_var = '__PY_CALLER__'

    if py_caller_var in os.environ:
        prog = os.environ[py_caller_var]
    else:
        prog = sys.argv[0]

        if prog.startswith('.'):
            prog = os.path.splitext(prog[2:])[0]
        prog = os.path.basename(prog)

    return prog


def get_prog_doc() -> str:
    doc_str = sys.modules['__main__'].__doc__

    if doc_str is not None:
        return doc_str.strip()
    else:
        return '<???>'


def init_logging(setup: t_setup) -> None:
    """Creates either a logger by cfg file or a default instance
    with given log level by arg --log_level (otherwise irgnored)

    """
    if setup['log_cfg'] == '':
        if setup['debug']:
            level = logging.DEBUG
            format = '%(levelname)s - %(message)s'
        else:
            level = __LOG_LEVEL_DEFAULT
            format = '%(message)s'

        logging.basicConfig(level=level, format=format)
    else:
        logging.config.fileConfig(setup['log_cfg'])


${run_func}


if __name__ == '__main__':
    main()
EOF

chmod +x $pyprog

msg "Created \"$pyprog\""

if [ "$create_uv_caller" = y ]; then
    uv_caller="${pyprog_basename%.py}"
    if [ -f "$uv_caller" -a "$force_mode" = n ]; then
        abort "\"$uv_caller\" already exist"
    fi

    /bin/cat >$uv_caller <<EOF
#!/bin/bash -eu

MYSELF=\$(realpath \$0)
PYPROG=\$MYSELF.py

__PY_CALLER__="$pyprog_basename" exec uv run \$PYPROG "\$@"
EOF

    chmod +x $uv_caller
fi

if [ "$log_ini" = y ]; then

    set -x
    log_ini_file="${pyprog_basename}_log.ini"
    set +x
    log_output_file="/var/log/${pyprog_basename}.log"

    sed "s!%log_output_file%!$log_output_file!g" >$log_ini_file <<EOF
[loggers]
keys=root,MAIN
# keys=root,MAIN,requests

[handlers]
keys=consoleHandler,fileHandler

[formatters]
keys=consoleFormatter,logfileFormatter

[logger_root]
level=ERROR
handlers=

[logger_MAIN]
level=DEBUG
handlers=consoleHandler,fileHandler
qualname=__main__

# [logger_requests]
# level=DEBUG
# handlers=consoleHandler,fileHandler
# qualname=urllib3

[handler_consoleHandler]
class=StreamHandler
level=DEBUG
formatter=consoleFormatter
args=(sys.stderr,)

[handler_fileHandler]
class=handlers.TimedRotatingFileHandler
level=DEBUG
formatter=logfileFormatter
args=('%log_output_file%','midnight',1,30)

[formatter_consoleFormatter]
format=%(levelname)s - %(name)s - %(message)s
datefmt=

[formatter_logfileFormatter]
format=%(asctime)s - %(levelname)s - %(name)s - line %(lineno)s in %(funcName)s(), PID %(process)s - %(message)s
datefmt=
EOF

    msg "Created $log_ini_file"
    msg "!!! currently creating log files as $log_output_file, please adjust..."

fi

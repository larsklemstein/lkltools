#!/bin/bash -eu

# ****************************************************************************
# DESCRIPTION
#   Staffold a simple python3 program incl. argparse and logging
#
#
# Todo: create a sample logging ini
#
# bugs and hints: lrsklemstein@gmail.com
# ****************************************************************************

readonly PROG=${0##*/}


msg() {
    echo "[$PROG] $*" >&2
}

abort() {
    msg "$*"
    exit 1
}

if [ $# -ne 1 ]
then
    echo "Usage: $PROG PYPROG" >&2
    exit 2
fi

pyprog="$1"

[[ "$pyprog" == *.py ]] || pyprog="$pyprog.py"

if [ -f "$pyprog" ]
then
    abort "\"$pyprog\" already exist"
fi

email=$(git config --global user.email 2>/dev/null) || true
[ -n "$email" ] || email="<unknown>"

/bin/cat >$pyprog <<EOF
#!/usr/bin/env python3

# ****************************************************************************
# DESCRIPTION
#    Does this and that...

# bugs and hints: ${email}
# ****************************************************************************


import argparse
import logging
import logging.config
import sys


def main():
    setup = get_setup_or_exit_with_usage()

    init_logging(setup)

    logger = logging.getLogger(__name__)

    logger.info("Ok, let's have some fun...")
    logger.debug('a debug message...')

    logger.info('rc=0')
    sys.exit(0)


def get_setup_or_exit_with_usage() -> dict[str, any]:
    parser = argparse.ArgumentParser(
        description='Just another program',
    )

    log_group = parser.add_mutually_exclusive_group()

    log_group.add_argument(
        '-D', '--debug', action='store_true',
        help='enable debug log level',
    )

    log_group.add_argument(
        '--log_cfg', dest='log_cfg_file',
        help='optional logging cfg in ini format',
    )

    parser.add_argument('EXAMPLE_ARG')

    args = vars(parser.parse_args())
    args = {k: '' if v is None else v for k, v in args.items()}

    return args


def init_logging(setup: dict[str, any]) -> None:
    """Creates either a logger by cfg file or a default instance
    with given log level by arg --log_level (otherwise irgnored)

    """
    if setup['log_cfg_file'] == '':
        log_level = logging.DEBUG if setup['debug'] else logging.INFO
        logging.basicConfig(level=log_level)
    else:
        logging.config.fileConfig(setup['log_cfg_file'])


if __name__ == '__main__':
    main()
EOF

chmod +x $pyprog

msg "-> $pyprog"



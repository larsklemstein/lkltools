#!/bin/bash -eu

# ****************************************************************************
# DESCRIPTON
#    Creates a yarn based typescript project
# 
#    Installation steps friendly copied from:
#
#    https://losikov.medium.com/
#    part-1-project-initial-setup-typescript-node-js-31ba3aa7fbf1
# ****************************************************************************

# bugs and hints: lrsklemstein@gmail.com


# --- constants

readonly PROG=${0##*/}


# --- functions

msg() {
    echo "[$PROG] $*" >&2
}

abort() {
    msg "$*"
    exit 1
}


# --- main

if [ $# -ne 1  ]
then
    echo "usage: $PROG DIR"
    exit 2
fi

project_dir="$(readlink -f $1)"

src_dir=$project_dir/src
out_dir=$project_dir/dist
tst_dir=$project_dir/test

app_ts=$src_dir/app.ts
app_js=$out_dir/app.js

jest_cfg=$project_dir/jest.config.js



# using an existing dir is only allowed with $PWD and without package.json
if [ -d "$project_dir" ]
then
    project_dir_norm=$(readlink -e "$project_dir")
    pwd_norm=$(readlink -e "$PWD")

    if [ "$project_dir_norm" != "$pwd_norm" ]
    then
        abort "project dir \"$project_dir\" already exist."
    fi

    if [ -f "$project_dir/package.json" ]
    then
        abort "project dir \"$project_dir\" contains a package.json"
    fi
fi

mkdir -p "$project_dir"

cd "$project_dir"


msg 'init...'
yarn init -y

msg "Install dev dependencies..."
yarn add --dev typescript jest ts-jest @types/jest @types/node nodemon ts-node \
    prettier eslint-config-prettier eslint-plugin-prettier

msg 'Create tsconfig.json, required for tsc and ts-node...'

/bin/cat >$project_dir/tsconfig.json <<EOF
{
  "compilerOptions": {
    /* Language and environment */
    "target": "ES2020",                // Modern JS features
    "module": "CommonJS",              // Or "ESNext" if you're using ESM
    "lib": ["ES2020", "DOM"],          // Pulls in docs/types for browser + modern JS APIs

    /* Type checking */
    "strict": true,                    // Enables strict type checking
    "noImplicitAny": true,             // Warn if types are missing
    "checkJs": true,                   // Show errors + docs in plain .js files

    /* Module resolution */
    "moduleResolution": "node",        // Common setup for Node/NPM projects
    "esModuleInterop": true,
    "allowSyntheticDefaultImports": true,

    /* Paths and project structure */
    "baseUrl": ".",                    // Project root
    "paths": {
      "@/*": ["src/*"]                 // Example alias: import from "@/foo"
    },

    /* Output (not needed for LSP but keeps tools happy) */
    "outDir": "./dist"
  },
  "include": ["src/**/*.ts", "src/**/*.js"],
  "exclude": ["node_modules", "dist"]
}
EOF

msg 'Create eslint.config.mjs...'

/bin/cat >$project_dir/eslint.config.mjs <<EOF
// eslint.config.mjs
import js from "@eslint/js";
import tseslint from "typescript-eslint";
import eslintConfigPrettier from "eslint-config-prettier";
import prettierPlugin from "eslint-plugin-prettier";

/** @type {import("eslint").Config[]} */
export default [
  // 1) Ignore build artifacts
  { ignores: ["dist/**", "build/**", "**/*.min.*"] },

  // 2) JS defaults
  js.configs.recommended,

  // 3) TS defaults (fast, no type-checking)
  ...tseslint.configs.recommended,

  // 4) Turn off ESLint rules that conflict with Prettier
  //    (must come AFTER the rule sets above)
  eslintConfigPrettier,

  // 5) Enable Prettier as an ESLint rule (so --fix / LSP formatting runs Prettier)
  {
    files: ["**/*.{js,jsx,ts,tsx}"],
    plugins: {
      prettier: prettierPlugin,
      "@typescript-eslint": tseslint.plugin,
    },
    // TS parser only for TS files (JS will keep default Espree)
    languageOptions: {
      parser: undefined,
    },
    rules: {
      // ---- Unused vars dedupe / ergonomics ----
      "no-unused-vars": "off",
      "@typescript-eslint/no-unused-vars": [
        "warn",
        {
          argsIgnorePattern: "^_",
          varsIgnorePattern: "^_",
          caughtErrorsIgnorePattern: "^_",
        },
      ],

      // ---- Prettier formatting as ESLint rule ----
      // Change "warn" to "error" if you want CI to fail on style drift
      "prettier/prettier": [
        "warn",
        {
          // Example Prettier options; tweak as you like or put them in .prettierrc
          semi: true,
          singleQuote: false,
          trailingComma: "all",
          printWidth: 100,
          tabWidth: 2,
        },
      ],
    },
  },

  // 6) TS-specific parser setup (applies ONLY to .ts/.tsx)
  {
    files: ["**/*.ts", "**/*.tsx"],
    languageOptions: {
      parser: tseslint.parser,
      parserOptions: {
        ecmaVersion: "latest",
        sourceType: "module",
      },
    },
  },
];

EOF

mkdir $src_dir $out_dir $tst_dir

msg "Create initial ${app_ts}..."
/bin/cat >$app_ts << EOF
// your code here...

console.log('Hello from app.ts...');
EOF

msg "Create jest ${jest_cfg}..."
/bin/cat >$jest_cfg <<EOF
module.exports = {
  preset: 'ts-jest',
  testEnvironment: 'node',
  transform: {
    '^.+\\.ts?$': 'babel-jest'
  },
  testRegex: '(/__tests__/.*|(\\.|/)(test|spec))\\.tsx?$',
  moduleFileExtensions: ['ts', 'tsx', 'js', 'jsx', 'json', 'node'],
};
EOF

msg "Add yarn scripts to package.json..."

# '.scripts={compile:"npx tsc", run:"node src/app.js"}' 
#
jqc='.scripts={'
jqc+='compile:"npx tsc", execute:"node '$app_js'"'
jqc+='}'

tmpf=$(mktemp)

jq "$jqc" < package.json >$tmpf

mv $tmpf package.json

msg "Done!"

#!/bin/bash -eu

# ****************************************************************************
# DESCRIPTION
#
# Create a mise based project in the currtent directory
# Tools to be installed can be provied optionally.
# ****************************************************************************

# bugs and hints: lrsklemstein@gmail.com


# --- constants

readonly PROG=${0##*/}
readonly MY_VERSION='0.2.0'


# --- functions

print_usage_and_exit() {
/bin/cat 1>&2 <<EOF

Usage: $PROG [options]Â project_name [tool]

  options: -g  do git check in
           -f  use fzf to choose from installed tools
           -v  show program version

EOF

exit 2
}

print_version_and_exit() {
    echo "This is $PROG version $MY_VERSION"
    exit 0
}

__crash_handler__() {
    local lineno=$1
    echo -e "\n!!! Script $0 crashed @ line $lineno"
    exit 1
}

trap '__crash_handler__ $LINENO' ERR


msg() {
    echo "[$PROG] $*" >&2
}

abort() {
    msg "$*"
    exit 1
}


# --- main

handle_git=n
use_fzf=n

while getopts gvf opt
do
    case $opt in 
        g)
            handle_git=y
            ;;
        f)
            use_fzf=y
            ;;
        v)
            print_version_and_exit ;;
        *)
            abort "Unknow optoon $opt"
    esac
done

shift $((OPTIND-1))

[ $# -ge 1 ] || print_usage_and_exit

project_name="$1"
shift

if [ $use_fzf = y ] && ! which fzf >/dev/null
then
    abort "For -f option you need fzf available in \$PATH"
fi

if [ $# -gt 0 -a $use_fzf = y ]
then
    abort \
        "You can not use -f switch and additional tool names at the same time"
fi

if [ $PWD = $HOME ]
then
    abort "Should not be called from your home dir"
fi

config_dir=$PWD/.config/mise

if [ -d "$config_dir" ]
then
    abort "Directory $config_dir already exist"
fi

mkdir -p $config_dir

dir_mise_files=${0%/*}/.mise_files
[ -d $dir_mise_files ] || abort "Dir $dir_mise_files not found"

/bin/cp $dir_mise_files/{config.toml,leave_project.rc} $config_dir

sed "s/%PROJECT_NAME%/$project_name/g" \
    $dir_mise_files/enter_project.rc.template > $config_dir/enter_project.rc

mise trust

while [ $# -gt 0 ]
do
    tool=$1
    mise use $tool
    shift
done

if [ $use_fzf = y ]
then
    fzf_choice=$(mise list | awk '{print($1 " " $2)}' | fzf)
    fzf_choice=${fzf_choice/ /@}
    fzf_choice=${fzf_choice/-/}

    if [ -n "$fzf_choice" ]
    then
        mise use $fzf_choice
    fi
fi

if [ $handle_git = y ]
then
    if [ ! -d "$PWD/.git" ]
    then
        msg "Initializing git..."
        git init
    fi

    echo ".old_tmux_window_name" >> $PWD/.gitignore

    git add -A .
    git commit -m 'initial mise config'
fi

# Let's show our new environment right away...
enter_file=$PWD/.config/mise/enter_project.rc
if [ -f "$enter_file" ]
then
    echo
    MISE_PROJECT_ROOT=$PWD . $enter_file
    echo
fi

msg "Done."

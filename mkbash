#!/bin/bash -eu

# ***************************************************************************+
# DESCRIPTION
#
# Simple initial bash script creator (for scripts which does a bit more
# than 'hello-world'). Attempts to implement some useful basic behaviour
# like comprehensive usage, switch handling and a propper structure.
# ***************************************************************************+

# bugs and hints: lrsklemstein@gmail.com


# ---- constants

readonly PROG=${0##*/}
readonly MY_VERSION='0.2.0'


# ---- functions

print_usage_and_exit() {
/bin/cat >&2 <<EOF

Usage: PROG [options] SCRIPT_NAME

  options: -e : edit the file after creation (Using \$EDITOR or vi)
           -s : create a shorter version (with less magic)
           -f : force overwriting
           -v : show version

EOF

exit 2
}

print_version_and_exit() {
    echo "This is $PROG version $MY_VERSION"
    exit 0
}

msg() {
    echo "[$PROG] $*" >&2
}

abort() {
    msg "$*"
    exit 1
}

__crash_handler() {
    local lineno=$(caller | cut -d' ' -f1)

    echo -e "\n!!! Script $0 crashed @ line $lineno:" >&2
    sed -n ${lineno}p $0 >&2

    exit 1
}


# ---- main

trap __crash_handler ERR

make_it_short=n
edit_file=n
overwrite=n

while getopts esfv opt
do
    case $opt in
        e)
            edit_file=y
            ;;
        s)
            make_it_short=y
            ;;
        f)
            overwrite=y
            ;;
        v)
            print_version_and_exit
            ;;
        *)
            print_usage_and_exit
    esac
done

shift $((OPTIND-1))

[ $# -eq 1 ] || print_usage_and_exit

script_name="$1"

script_name_base=${script_name##*/}

email=$(git config --global user.email 2>/dev/null) || true
[ -n "$email" ] || email="<unknown>"


if [ -f "$script_name" ]
then
    if [ "$overwrite" = y ]
    then
        /bin/rm -f "$script_name"
    else
        abort "script file \"script_name\" already exists"
    fi
fi

if [ $make_it_short = n ]
then

/bin/cat >$script_name <<EOF_LONG
#!/bin/bash -eu

# ****************************************************************************
# DESCRIPTION
# Does this and that.
#
# And much more, even using description with several lines.
#
# BASE USAGE
# ${script_name_base} [-h][-v] FIX_ARG1
#
# OPTIONS
# -h       : show more comprehensive help
# -v       : show ${script_name_base} version
# ****************************************************************************

# hint: To auto-generate usage texts, please do not insert blank line(s)
# after DESCRIPTION, BASE USAGE and OPTIONS headers.

# bugs and hints: $email


# ----------------------------------------------------------------------------
# constants
# ----------------------------------------------------------------------------

readonly PROG=\${0##*/}
readonly MY_VERSION=0.1.0


# ----------------------------------------------------------------------------
# functions
# ----------------------------------------------------------------------------

print_usage_and_exit() {
    show_description
    exit 2
}

msg() {
    echo "[$PROG] \$*" >&2
}

abort() {
    msg "\$* (rc=1)"
    exit 1
}

__crash_handler() {
    local lineno=\$(caller | cut -d' ' -f1)

    echo -e "\\n!!! Script \$0 crashed @ line \$lineno:" >&2
    sed -n \${lineno}p \$0 >&2

    exit 1
}

print_version_and_exit() {
    echo "This is \$PROG version \$MY_VERSION"
    exit 0
}

show_description() {
    sed -n '/^#\ *DESCRIPTION/, /^# *BASE USAGE/ p' "\$0" \\
    | egrep -v '^# *(DESCRIPTION|BASE USAGE)' | sed 's/^# *//'
}

show_base_usage() {
    grep -A1 "^# BASE USAGE" "\$0" | tail -1 | sed 's/^# *//'
}

show_options() {
    sed -n '/^# *OPTIONS/, /^# *\*\*\*/p' "\$0" \\
    | egrep -v '^# (OPTIONS|\*)' | sed 's/^# *//'
}

print_short_usage_and_exit() {
    usage=\$(show_base_usage)
    echo "usage: \$usage" >&2
    exit 2
}

print_long_usage_and_exit() {
description=\$(show_description)
base_usage=\$(show_base_usage)
options=\$(show_options)

cat << _eof_
# Description

\$description


# Base usage

\$base_usage


# Options

\$options
_eof_
exit 0
}


# ----------------------------------------------------------------------------
# main
# ----------------------------------------------------------------------------

trap __crash_handler ERR

special_feature=

OPTERR=1

while getopts hvs: opt
do
    case \$opt in
        h)
            print_long_usage_and_exit
            ;;
        v)
            print_version_and_exit
            ;;
        s)
            special_feature=\$OPTARG
            ;;
        *)
            echo >&2
            print_short_usage_and_exit
    esac
done

shift \$((OPTIND-1))

[ \$# -eq 1 ] || print_short_usage_and_exit


# And here comes something useful...

EOF_LONG

else

/bin/cat >$script_name <<EOF_SHORT
#!/bin/bash -eu

# ****************************************************************************
# DESCRIPTION
#
# Does this and that.
# ****************************************************************************

# bugs and hints: $email


# ----------------------------------------------------------------------------
# constants
# ----------------------------------------------------------------------------

readonly PROG=\${0##*/}


# ----------------------------------------------------------------------------
# functions
# ----------------------------------------------------------------------------

print_usage_and_exit() {
    echo "Usage: $PROG FIXARG" >&2
    exit 2
}

msg() {
    echo "[$PROG] \$*" >&2
}

abort() {
    msg "\$* (rc=1)"
    exit 1
}

__crash_handler() {
    local lineno=\$(caller | cut -d' ' -f1)

    echo -e "\\n!!! Script \$0 crashed @ line \$lineno:" >&2
    sed -n \${lineno}p \$0 >&2

    exit 1
}


# ----------------------------------------------------------------------------
# main
# ----------------------------------------------------------------------------

trap __crash_handler ERR

[ \$# -eq 1 ] || print_usage_and_exit


# And here comes something useful...

EOF_SHORT

fi # if make_it_short...


chmod +x $script_name

msg "Created new bash script $script_name"

if [ $edit_file = y ]
then
    if [[ $EDITOR =~ n?vim ]]
    then
        $EDITOR '+normal G' $script_name
    else
        ${EDITOR:-vi} $script_name
    fi
fi

#!/bin/bash -eu

# mkpypep == make python (optionally dockerized) pipenv project

# Todos:
#  - use getopt
#  - imlpement docker switch
#  - implement log.ini switch
#  - implement wrapper script switch

# bugs and hints: lrsklemstein@gmail.com


export PIPENV_VENV_IN_PROJECT=1


msg() {
    echo "$*" >&2
}

abort() {
    msg "$*"
    exit 1
}

main() {
    [ $# -eq 1 -o $# -eq 2 ] || print_long_usage_and_exit

    project_dir="$1"
    py_version="${2:-}"

    if [ -d "$project_dir" ]
    then
        abort "project dir \"$project_dir\" already exists"
    fi

    if [ -z "$py_version" ]
    then
        py_version=$(get_major_py_version)
    fi

    mkdir -p "$project_dir"
    cd "$project_dir"

    pipenv --python $py_version

    exit 0
}

print_short_usage_and_exit() {
    basic_usage=$(get_basic_usage)
    msg "usage: $basic_usage"
    exit 2
}

print_long_usage_and_exit() {
basic_usage=$(get_basic_usage)

/bin/cat <<EOF
mkpypep == make python (optionally dockerized) pipenv project

usage:
  $basic_usage

options:
 -h                : this usage
 -p python_version : specify python version to be used (e.g. "-p 3.11")
 -d                : create Dockerfile
 -L                : create log.ini file
 -W                : create wrapper script (with pipenv or docker run call)
 -a                : combination of -d -L -W

EOF
exit 2
}

get_basic_usage() {
    progname=${0##*/}
    echo "$progname [-h] [-p python_version] [-d] [-L] [-W] PROJECT_DIR"
}

get_major_py_version() {
    if which pyenv >/dev/null 2>&1
    then
        pv=$(pyenv versions | grep -v '^\* *system' |tr -d ' ' |tail -1)
    else
        pv=$(which python3)
    fi

    cut -d. -f1,2 <<< $pv
}


main "$@"

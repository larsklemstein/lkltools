#!/usr/bin/env python3

# ****************************************************************************
# DESCRIPTION
#   Simple file mass renaming. Please see usage for further details.
#
# bugs and hints: lrsklemstein@gmail.com
# ****************************************************************************

import argparse
import glob
import logging
import math
import os.path
import shutil
import sys


__log_level_default = logging.INFO


def main():
    setup = get_prog_setup_or_exit_with_usage()  # might exit with rc=2
    init_logging(setup)

    logger = logging.getLogger(__name__)

    try:
        run(setup)
    except Exception:
        logger.critical('Abort, rc=3', exc_info=True)
        sys.exit(3)

    sys.exit(0)


def get_prog_setup_or_exit_with_usage() -> dict[str, any]:
    parser = argparse.ArgumentParser(
        description=(
            'mfrn == mass file renamer. Files will be renamed by using '
            'the specified template, which must contain exactly one '
            'occurence of %d '
            '(e.g. "myfile_%d.txt"). Program call on already (partially) '
            're-named file lists should do no harm.'
        )
    )

    log_group = parser.add_mutually_exclusive_group()

    parser.add_argument('template')

    parser.add_argument(
        '-D', '--dir', default='.',
        help=(
            'directory to scan files non recursively '
            '(default is the current dirctory)'
        )
    )

    parser.add_argument(
        '-g', '--glob', dest='glob', default='*',
        help='filter files to be processed by glob pattern (default is *)'
    )

    log_group.add_argument(
        '--debug', action='store_true',
        help='enable debug log level',
    )

    log_group.add_argument(
        '--log_cfg', dest='log_cfg',
        help='optional logging cfg in ini format',
    )

    args = vars(parser.parse_args())
    args = {k: '' if v is None else v for k, v in args.items()}

    return args


def init_logging(setup: dict[str, any]) -> None:
    """Creates either a logger by cfg file or a default instance
    with given log level by arg --log_level (otherwise irgnored)

    """
    if setup['log_cfg'] == '':
        log_level = logging.DEBUG if setup['debug'] else __log_level_default
        logging.basicConfig(level=log_level, format='%(message)s')
    else:
        logging.config.fileConfig(setup['log_cfg'])


def run(setup: dict[str, any]) -> None:
    logger = logging.getLogger(__name__)

    file_list = get_file_list_or_exit(setup)
    logger.debug('Files returned by get_file_list_or_exit():', len(file_list))

    moved = move_files(file_list)

    logger.info(f'Done (moved {moved} file(s)).')


def get_file_list_or_exit(setup: dict[str, any]) -> list[str, str, str]:
    file_list = make_initial_file_list(setup)

    exit_on_empty_file_list(file_list, setup['glob'])

    numwidth = int(math.log(len(file_list), 10)) + 1

    template = setup['dir'] + os.path.sep + \
        setup['template'].replace('%d', f'%0{numwidth}d')

    for n, file_names in enumerate(file_list, start=1):
        file_real, file_tmp_active = file_names[:]
        file_dest = template % n
        file_names.append(file_dest)

    return file_list


def make_initial_file_list(setup: dict[str, any]) -> list[str, str]:
    file_list = list()
    glob_pattern = setup['dir'] + os.path.sep + setup['glob']

    for file in glob.glob(glob_pattern):
        if os.path.isdir(file):
            continue

        file_tmp_active = file + '.__tmp_active__'
        file_list.append([file, file_tmp_active])

    file_list.sort()

    return file_list


def exit_on_empty_file_list(
            file_list: list[str, str, str], glob: str):
    logger = logging.getLogger(__name__)

    if len(file_list) == 0:
        mh = 'matching' if glob == '*' else ''
        logger.info(f'No {mh}files found, rc=0')
        sys.exit(0)


def move_files(file_list: list[str, str, str]) -> int:
    """we move to a temporily name before moving to dest, because
    so we get rid off problems due conflicting existing file names,
    .e.g. due conflicts after incomplete further runs etc.
    At least I hope so...
    """
    logger = logging.getLogger(__name__)

    for n, file_names in enumerate(file_list, start=1):
        file_real, file_tmp_active, file_dest = file_names[:]

        # when e.g. executed twice on the same file set the destination
        # file might already exist with the desired name
        if file_real != file_dest:
            shutil.move(file_real, file_tmp_active)

    moved = 0
    for n, file_names in enumerate(file_list, start=1):
        file_real, file_tmp_active, file_dest = file_names[:]

        if file_real == file_dest:
            logger.info(f'  [{n}] no action required for {file_dest}')
        else:
            logger.info(f'  [{n}] {file_real} -> {file_dest}')
            shutil.move(file_tmp_active, file_dest)
            moved += 1

    return moved


if __name__ == '__main__':
    main()

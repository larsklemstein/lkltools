#!/bin/bash -eu

# ****************************************************************************
# DESCRIPTION
#
# Simple javascript project creator, based on yarn and eslint.
# pino is the logging framework of choice here.
#
# bugs and hints: lrsklemstein@gmail.com
# ****************************************************************************

# ----------------------------------------------------------------------------
# constants
# ----------------------------------------------------------------------------

readonly PROG=${0##*/}
readonly MY_VERSION='0.1'


# ----------------------------------------------------------------------------
# functions
# ----------------------------------------------------------------------------

print_usage_and_exit() {
/bin/cat >&2 << EOF

Simple Javascript project creator

Usage: [options] ${PROG} DIR [main]

  options: -g      : handle git
           -c      : assume commonJS code
           -e      : do not create eslint.cfg automatically
           -d text : program description
           -v      : show $PROG version

EOF
exit 2
}

print_version_and_exit() {
    echo "This is $PROG version $MY_VERSION"
    exit 0
}

msg() {
    echo "[$PROG] $*" >&2
}

abort() {
    msg "$* (rc=1)"
    exit 1
}

alter_package_json() {
    local jq_command="$1"
    local package_json="${2:-package.json}"

    jq "$jq_command" $package_json >$package_json.tmp
    /bin/mv $package_json.tmp $package_json
}


# ----------------------------------------------------------------------------
# main
# ----------------------------------------------------------------------------

trap 'echo -e "\n!!! $0 crashed in line $LINENO" >&2' ERR

# defaults
handle_git=n
use_commonjs=n
eslint_init_dialogue=n
description='<pleaase describe your program>'

while getopts gcd:ev opt
do
    case $opt in
        g)
            handle_git=y ;;
        c)
            use_commonjs=y ;;
        e)
            eslint_init_dialogue=y ;;
        d)
            description=$OPTARG ;;
        v)
            print_version_and_exit ;;
        *)
            abort "Unknown option specified"
    esac
done

shift $((OPTIND-1))

[ $# -eq 1 -o $# -eq 2 ] || print_usage_and_exit

dir=$(realpath $1)
main=${2:-app.js}

if [ -d "$dir" -a "$dir" != $PWD ]
then
    echo "Directory \"$dir\" already exist" >&2
    exit 1
fi

if [ "$dir" = "$HOME" ]
then
    abort "You should not create a project in \$HOME directly"
fi

[[ $main =~ \.js$ ]] || main=${main}.js

if [ $dir != . -a $dir != ./ ]
then
    mkdir -p "$dir" && cd "$dir"
fi


# --- create initial program ---

email_address=$(git config user.email 2>/dev/null)
[ -n "$email_address" ] || email_address='<unknown>'

if [ $use_commonjs = 'n' ]
then
    import_logger="import pino from 'pino';"
else
    import_logger="const pino = require('pino');"
fi

create_logger='const logger = pino();'

/bin/cat > $main <<EOF
#!/usr/bin/env node

/*++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++*
DESCRIPTION

${description}

bugs and hints: ${email_address}
*****************************************************************************/

'use strict';

${import_logger}

${create_logger}


function main() {
    logger.info('Hi there...');
}

main();
EOF

chmod +x $main


# --- create and adjust package.json, install logger, init eslint ----

yarn init --yes

if [ "$use_commonjs" = "n" ]
then
    alter_package_json '.type="module"'
fi

alter_package_json '.main="'"$main"'"'

yarn add pino
yarn add --dev pino-pretty eslint nodemon


# --- add yarn scripts ---

jq_cmd='.scripts={'
jq_cmd+='"dev": "node ${npm_package_main} | yarn pino-pretty",'
jq_cmd+='"prod": "node ${npm_package_main}",'
jq_cmd+='"watch": "yarn nodemon ${npm_package_main}",'
jq_cmd+='"lint": "yarn eslint",'
jq_cmd+='}'
alter_package_json "$jq_cmd"


# --- create eslint cfg

if [ $eslint_init_dialogue = n ]
then

addition=
if [ $use_commonjs = y ]
then
  addition='{files: ["**/*.js"], languageOptions: {sourceType: "commonjs"}},'
fi

/bin/cat >$dir/eslint.config.mjs <<EOF
import globals from "globals";
import pluginJs from "@eslint/js";

/** @type {import('eslint').Linter.Config[]} */
export default [
  ${addition}

  {languageOptions: { globals: globals.browser }},
  pluginJs.configs.recommended,
];
EOF

else
    yarn create @eslint/config
fi


# --- finally: git stuff ----

if [ $handle_git = 'y' ]
then
    if [ ! -d "$dir/.git" ]
    then
        git init
    fi

    echo "node_modules/" >>.gitignore

    git add -A .
    git commit -m "js setup"
fi


echo -e "\n\nDone." >&2
